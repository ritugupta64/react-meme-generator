{"version":3,"sources":["components/header.js","components/memegenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","Memegenerator","state","topText","bottomText","defaultMemeImage","imageData","changeText","e","_e$target","target","name","value","_this","setState","Object","defineProperty","submitForm","preventDefault","randomNum","Math","floor","random","data","memes","length","randomImage","url","_this2","this","fetch","then","response","json","onSubmit","type","onChange","placeholder","style","marginLeft","src","alt","App","header","memegenerator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAYeA,mLARX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,oCAJaE,oBCyFNC,6MAvFPC,MAAQ,CACJC,QAAQ,GACRC,WAAW,GACXC,iBAAiB,0CACjBC,UAAU,MAGdC,WAAa,SAACC,GAAM,IAAAC,EACMD,EAAEE,OAAjBC,EADSF,EACTE,KAAMC,EADGH,EACHG,MACbC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKJ,EAAMC,OAiBfK,WAAa,SAACT,GACVA,EAAEU,iBACF,IAAMC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWT,EAAKX,MAAMI,UAAUiB,KAAKC,MAAMC,QAEvEC,EAAcb,EAAKX,MAAMI,UAAUiB,KAAKC,MAAML,GAAWQ,IAE/Dd,EAAKC,SAAS,CACVT,iBAAiBqB,wFAlBL,IAAAE,EAAAC,KAChBC,MAAM,qCACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAR,GAAI,OAAIK,EAAKd,SAAS,CAChBR,UAAUiB,uCAuB9B,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,QAAMoC,SAAYL,KAAKZ,YACrBrB,EAAAC,EAAAC,cAAA,SACIqC,KAAK,OACLxB,KAAK,UACLC,MAAQiB,KAAK3B,MAAMC,QACnBiC,SAAYP,KAAKtB,WACjB8B,YAAY,aACZtC,UAAU,eAGdH,EAAAC,EAAAC,cAAA,SACIqC,KAAK,OACLxB,KAAK,aACLC,MAAOiB,KAAK3B,MAAME,WAClBgC,SAAYP,KAAKtB,WACjB8B,YAAY,cACZtC,UAAU,aACVuC,MAAO,CAACC,WAAW,SAGvB3C,EAAAC,EAAAC,cAAA,UACIC,UAAU,MACVuC,MAAO,CAACC,WAAW,QAFvB,aAQA3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAW8B,KAAK3B,MAAMC,SACpCP,EAAAC,EAAAC,cAAA,OAAK0C,IAAOX,KAAK3B,MAAMG,iBAAkBoC,IAAI,SAC7C7C,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAc8B,KAAK3B,MAAME,qBA9E3BJ,aCeb0C,0LATX,OACE9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC6C,EAAD,MACA/C,EAAAC,EAAAC,cAAC8C,EAAD,cALU5C,cCME6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.4be994c5.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Header extends Component {\n  render() {\n    return (\n      <div className=\"header\">\n        <h1>Meme Generator</h1>\n      </div>\n    )\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react'\n\nclass Memegenerator extends Component {\n\n        state = {\n            topText:\"\",\n            bottomText:\"\",\n            defaultMemeImage:\"https://i.ibb.co/jkK058N/Scared-Cat.jpg\",\n            imageData:[]\n        }\n\n        changeText = (e) => {\n            const {name, value} = e.target;\n            this.setState({\n                [name]:value\n            })\n        }\n\n\n\n         componentDidMount(){\n            fetch(\"https://api.imgflip.com/get_memes\")\n            .then(response => response.json())\n            .then(data => this.setState({\n                        imageData:data\n                    })\n               \n            )\n        }\n\n\n        submitForm = (e) => {\n            e.preventDefault();\n            const randomNum = Math.floor(Math.random() * this.state.imageData.data.memes.length);\n            //console.log(randomNum);\n            const randomImage = this.state.imageData.data.memes[randomNum].url;\n            //console.log(randomImage);\n            this.setState({\n                defaultMemeImage:randomImage\n            })\n        }\n\n       \n       \n\n\n  render() {\n    return (\n      <div className=\"container\">\n          <form onSubmit = {this.submitForm}>\n            <input \n                type=\"text\" \n                name=\"topText\" \n                value= {this.state.topText}\n                onChange = {this.changeText} \n                placeholder=\"FIRST TEXT\" \n                className=\"inputField\"\n            />\n\n            <input \n                type=\"text\" \n                name=\"bottomText\" \n                value={this.state.bottomText}\n                onChange = {this.changeText} \n                placeholder=\"BOTTOM TEXT\"\n                className=\"inputField\"\n                style={{marginLeft:\"5px\"}}\n                 />\n\n            <button \n                className=\"btn\"\n                style={{marginLeft:\"5px\"}}\n                >Get Meme\n            </button>\n\n         </form>\n\n            <div className=\"memeGen\">\n                <h3 className=\"topText\">{this.state.topText}</h3>\n                <img src = {this.state.defaultMemeImage} alt=\"meme\"/>\n                <h3 className=\"bottomText\">{this.state.bottomText}</h3>\n            \n            \n            </div>\n\n\n        </div>\n    )\n  }\n}\n\nexport default Memegenerator;\n","import React, { Component } from 'react';\n\nimport Header from \"./components/header\";\nimport Memegenerator from \"./components/memegenerator\";\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Memegenerator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}